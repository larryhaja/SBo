From b95b1d017fed7dbb2ecefe26c97b438c7949566e Mon Sep 17 00:00:00 2001
From: Allan Wind <allan_wind@lifeintegrity.com>
Date: Tue, 17 Apr 2012 01:06:47 -0400
Subject: [PATCH 1/2] Python 2.6 required numbered (or named) format strings

---
 offlineimap/folder/Base.py  |    2 +-
 offlineimap/ui/UIBase.py    |   10 +++++-----
 test/OLItest/TestRunner.py  |    2 +-
 test/tests/test_01_basic.py |    8 ++++----
 4 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/offlineimap/folder/Base.py b/offlineimap/folder/Base.py
index 6f6f364..b1f5a56 100644
--- a/offlineimap/folder/Base.py
+++ b/offlineimap/folder/Base.py
@@ -386,7 +386,7 @@ class BaseFolder(object):
                             self.getmessageuidlist())
         num_to_copy = len(copylist)
         if num_to_copy and self.repository.account.dryrun:
-            self.ui.info("[DRYRUN] Copy {} messages from {}[{}] to {}".format(
+            self.ui.info("[DRYRUN] Copy {0} messages from {1}[{2}] to {3}".format(
                     num_to_copy, self, self.repository, dstfolder.repository))
             return
         for num, uid in enumerate(copylist):
diff --git a/offlineimap/ui/UIBase.py b/offlineimap/ui/UIBase.py
index eea929d..a268c21 100644
--- a/offlineimap/ui/UIBase.py
+++ b/offlineimap/ui/UIBase.py
@@ -301,7 +301,7 @@ class UIBase(object):
     def makefolder(self, repo, foldername):
         """Called when a folder is created"""
         prefix = "[DRYRUN] " if self.dryrun else ""
-        self.info("{}Creating folder {}[{}]".format(
+        self.info("{0}Creating folder {1}[{2}]".format(
                 prefix, foldername, repo))
 
     def syncingfolder(self, srcrepos, srcfolder, destrepos, destfolder):
@@ -346,9 +346,9 @@ class UIBase(object):
     def deletingmessages(self, uidlist, destlist):
         ds = self.folderlist(destlist)
         prefix = "[DRYRUN] " if self.dryrun else ""
-        self.info("{}Deleting {} messages ({}) in {}".format(
-                prefix, len(uidlist),
-                offlineimap.imaputil.uid_sequence(uidlist), ds))
+        self.info("{0}Deleting {1} messages ({2}) in {3}".format(
+                prefix, len(uidlist), offlineimap.imaputil.uid_sequence(uidlist), ds
+        ))
 
     def addingflags(self, uidlist, flags, dest):
         self.logger.info("Adding flag %s to %d messages on %s" % (
@@ -474,7 +474,7 @@ class UIBase(object):
 
     def callhook(self, msg):
         if self.dryrun:
-            self.info("[DRYRUN] {}".format(msg))
+            self.info("[DRYRUN] {0}".format(msg))
         else:
             self.info(msg)
 
diff --git a/test/OLItest/TestRunner.py b/test/OLItest/TestRunner.py
index 3535b61..c6b58b7 100644
--- a/test/OLItest/TestRunner.py
+++ b/test/OLItest/TestRunner.py
@@ -163,7 +163,7 @@ class OLITestLib():
             for folder in dirs:
                 res_t, data = imapobj.delete(b'\"'+folder+b'\"')
                 assert res_t == 'OK', "Folder deletion of {} failed with error"\
-                    ":\n{} {}".format(folder.decode('utf-8'), res_t, data)
+                    ":\n{0} {1}".format(folder.decode('utf-8'), res_t, data)
             imapobj.logout()
 
     @classmethod
diff --git a/test/tests/test_01_basic.py b/test/tests/test_01_basic.py
index f5a0ea1..a53b6f0 100644
--- a/test/tests/test_01_basic.py
+++ b/test/tests/test_01_basic.py
@@ -67,7 +67,7 @@ class TestBasicFunctions(unittest.TestCase):
         self.assertEqual(res, "")
         boxes, mails = OLITestLib.count_maildir_mails('')
         self.assertTrue((boxes, mails)==(0,0), msg="Expected 0 folders and 0 "
-            "mails, but sync led to {} folders and {} mails".format(
+            "mails, but sync led to {0} folders and {1} mails".format(
                 boxes, mails))
 
     def test_02_createdir(self):
@@ -82,7 +82,7 @@ class TestBasicFunctions(unittest.TestCase):
         self.assertEqual(res, "")
         boxes, mails = OLITestLib.count_maildir_mails('')
         self.assertTrue((boxes, mails)==(2,0), msg="Expected 2 folders and 0 "
-            "mails, but sync led to {} folders and {} mails".format(
+            "mails, but sync led to {0} folders and {1} mails".format(
                 boxes, mails))
 
     def test_03_nametransmismatch(self):
@@ -101,7 +101,7 @@ class TestBasicFunctions(unittest.TestCase):
         mismatch = "ERROR: INFINITE FOLDER CREATION DETECTED!" in res
         self.assertEqual(mismatch, True, msg="Mismatching nametrans rules did "
             "NOT trigger an 'infinite folder generation' error. Output was:\n"
-             "{}".format(res))
+             "{0}".format(res))
         # Write out default config file again
         OLITestLib.write_config_file()
 
@@ -120,7 +120,7 @@ class TestBasicFunctions(unittest.TestCase):
         self.assertEqual(res, "")
         boxes, mails = OLITestLib.count_maildir_mails('')
         self.assertTrue((boxes, mails)==(1,1), msg="Expected 1 folders and 1 "
-            "mails, but sync led to {} folders and {} mails".format(
+            "mails, but sync led to {0} folders and {1} mails".format(
                 boxes, mails))
         # The local Mail should have been assigned a proper UID now, check!
         uids = OLITestLib.get_maildir_uids('INBOX.OLItest')
-- 
1.7.2.5

