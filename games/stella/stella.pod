# pod source for stella man page. Convert with:
# pod2man --stderr -s6 -cSlackBuilds.org -r4.6 -u stella.pod > stella.6

=pod

=head1 NAME

stella - an Atari 2600 emulator

=head1 SYNOPSIS

B<stella> I<options> I<ROM file>

=head1 DESCRIPTION

B<stella> is a comprehensive emulator of the old Atari 2600 video-game
console. It support most Atari 2600 games and many peripherals.

If you start Stella and do not specify a ROM image, it will start in
'ROM Launcher' mode. If this is your first time starting Stella, you
will be asked to select the default ROM directory to use.

This man page only documents the command-line options and default
keybindings. The complete documentation is in I<index.html> and
I<debugger.html>, usually installed in I</usr/share/doc/stella/> or
I</usr/doc/stella-4.6/>.

=head1 OPTIONS

=over 4

=item B<-video> <direct3d|opengl|opengles2|opengles|software>

Use the given rendering backend (where applicable); default is the best
available mode detected.

=item B<-vsync> <1|0>

Synchronize screen updates to the vertical blank period. This can
result in smoother updates, and eliminate tearing.

=item B<-fullscreen> <1|0>

Enable fullscreen mode.

=item B<-center> <1|0>

Centers game window (if possible).

=item B<-palette> <standard|z26|user>

Set the palette to either normal Stella, the one used in the z26
emulator, or a user-defined palette.

=item B<-colorloss> <1|0>

Enable/disable the PAL color-loss effect.

=item B<-framerate> <number>

Display the given number of frames per second. Normally, Stella will
determine framerate based on number of scanlines. Setting this to 0
automatically enables auto-frame calculation (ie, framerate based on
scanlines).

=item B<-timing> <sleep|busy>

Determines type of wait to perform between processing frames. Sleep
will release the CPU as much as possible, and is the preferred method
on laptops (and other low-powered devices) and when using VSync. Busy
will emulate z26 busy-wait behaviour, and use all possible CPU time,
but may eliminate graphical 'tearing' in software mode.

=item B<-uimessages> <1|0>

Enable or disable display of message in the UI. Note that messages
indicating serious errors override this setting, and are always shown.

=item B<-sound> <1|0>

Enable or disable sound generation.

=item B<-fragsize> <number>

Specify the sound fragment size to use. Linux/Mac seems to work with
512, Windows usually needs 1024.

=item B<-freq> <number>

Set sound sample output frequency (11025,22050,31400,44100,48000)
Default is 31400. Do not change unless you experience sound issues.

=item B<-volume> <number>

Set the volume (0 - 100).

=item B<-tia.zoom> <zoom>

Use the specified zoom level (integer) while in TIA/emulation mode.

=item B<-tia.inter> <1|0>

Use interpolation for the TIA image (results in blending/smoothing of
the image).

=item B<-tia.aspectn> <number>

=item B<-tia.aspectp> <number>

Specify the amount (as a percentage) to scale the TIA image width in
NTSC and PAL mode. Since many video modes do not use square pixels, you
can reduce width until the pixels appear square. Allowable values are
80 - 120; I find 85 - 90 gives the most authentic look for NTSC, and
105 - 110 for PAL.

=item B<-tia.fsfill> <1|0>

Stretch TIA image completely while in fullscreen mode (vs. an integral
stretch which won't necessarily completely fill the screen).

=item B<-tv.filter> <1 - 6>

Blargg TV effects, 0 is disabled, next numbers in sequence represent
presets for 'Composite', 'S-Video', 'RGB', 'Bad Adjust', and 'Custom'
modes.

=item B<-tv.scanlines> <0 - 100>

Blargg TV effects scanline intensity, where 0 means completely off.

=item B<-tv.scaninter> <1|0>

Blargg TV effects scanline interpolation, resulting in
blending/smoothing of the scanlines.

=item B<-tv.contrast> <number>

Blargg TV effects 'contrast' (only available in custom mode, range -1.0
to 1.0).

=item B<-tv.brightness> <number>

Blargg TV effects 'brightness' (only available in custom mode, range
-1.0 to 1.0).

=item B<-tv.hue> <number>

Blargg TV effects 'hue' (only available in custom mode, range -1.0 to
1.0).

=item B<-tv.saturation> <number>

Blargg TV effects 'saturation' (only available in custom mode, range
-1.0 to 1.0).

=item B<-tv.gamma> <number>

Blargg TV effects 'gamma' (only available in custom mode, range -1.0 to
1.0).

=item B<-tv.sharpness> <number>

Blargg TV effects 'sharpness' (only available in custom mode, range
-1.0 to 1.0).

=item B<-tv.resolution> <number>

Blargg TV effects 'resolution' (only available in custom mode, range
-1.0 to 1.0).

=item B<-tv.artifacts> <number>

Blargg TV effects 'artifacts' (only available in custom mode, range
-1.0 to 1.0).

=item B<-tv.fringing> <number>

Blargg TV effects 'fringing' (only available in custom mode, range -1.0
to 1.0).

=item B<-tv.bleed> <number>

Blargg TV effects 'bleed' (only available in custom mode, range -1.0 to
1.0).

=item B<-cheat> <code>

Use the specified cheatcode (see Cheat section for description).

=item B<-loglevel> <0|1|2>

Indicates level of logging to perform while the application is running.
Zero completely disables logging (except for serious errors), while the
remaining numbers show increasingly more detail.

=item B<-logtoconsole> <1|0>

Indicates that logged output should be printed to the
console/commandline as it's being collected. An internal log will still
be kept, and the amount of logging is still controlled by 'loglevel'.

=item B<-joydeadzone> <number>

Sets the joystick axis deadzone area for joysticks/gamepads. All values
within the deadzone are treated as zero-axis values, while only those
values outside are registered as valid input. Accepts a number from 0 -
29, and uses the formula 3200 + number * 1000. So the possible deadzone
values range from 3200 to 32200.

=item B<-joyallow4> <1|0>

Allow all 4 directions on a joystick to be pressed simultaneously.
Bumper Bash ignores this setting, and always allows all 4 directions.

=item B<-usemouse> <always|analog|never>

Use mouse as a controller as specified by ROM properties in specific
case. Always and never are self-explanatory, analog means only for
analog-type devices (paddles, trackball, etc).

=item B<-grabmouse> <1|0>

Locks the mouse cursor in the game window in emulation mode.

=item B<-hidecursor> <1|0>

Always hide the mouse cursor, or show it when appropriate.

=item B<-dsense> <number>

Sensitivity for emulation of paddles when using a digital device (ie,
joystick digital axis or button, keyboard key, etc). Valid range of
values is from 1 to 10, with larger numbers causing faster movement.

=item B<-msense> <number>

Sensitivity for emulation of paddles when using a mouse. Valid range of
values is from 1 to 15, with larger numbers causing faster movement.

=item B<-saport> <lr|rl>

Determines how to enumerate the Stelladaptor/2600-daptor devices in the
order they are found: 'lr' means first is left port, second is right
port, 'rl' means the opposite.

=item B<-ctrlcombo> <1|0>

Use control-x key combos. This is normally enabled, since the Quit
command is tied to 'Control-q'. However, there are times when a
2-player game is using either the 'f' or 'r' keys for movement, and
pressing Control (for Fire) will perform an unwanted action associated
with Control-r or Control-f.

=item B<-autoslot> <1|0>

Automatically switch to the next available save state slot after saving
a ROM state file.

=item B<-stats> <1|0>

Overlay console info on the TIA image during emulation.

=item B<-fastscbios> <1|0>

Disable Supercharger BIOS progress loading bars.

=item B<-snapsavedir> <path>

The directory to save snapshot files to.

=item B<-snaploaddir> <path>

The directory to load snapshot files from.

=item B<-snapname> <int|rom>

When saving snapshots, use either the internal database name or the
actual ROM filename.

=item B<-sssingle> <1|0>

Generate single snapshot instead of many, overwriting any previous
snapshots.

=item B<-ss1x> <1|0>

Ignore any scaling applied to the TIA image, and save snapshot in
unscaled (1x) mode.

=item B<-ssinterval> <number>

Set the interval in seconds between taking snapshots in continuous
snapshot mode (currently, 1 - 10).

=item B<-rominfo> <rom>

Display detailed information about the given ROM, and then exit Stella.

=item B<-listrominfo>

Prints relevant contents of the Stella ROM database, one ROM per line,
and then exit Stella. This can be used for external frontends.

=item B<-exitlauncher> <1|0>

Always exit to ROM launcher when exiting a ROM (normally, an exit to
launcher only happens when started with the launcher).

=item B<-launcherres> <WxH>

Set the size of the ROM launcher.

=item B<-launcherfont> <small|medium|large>

Set the size of the font in the ROM launcher.

=item B<-launcherexts> <allfiles|allroms|LIST>

Specifies which files to show in the ROM launcher ('allfiles' is
self-explanatory, 'allroms' is all files with valid rom extensions
(currently: a26, bin, rom, gz, zip), 'LIST' is a ':' separated list of
valid rom extensions.

=item B<-romviewer> <0|1|2>

Hide ROM info viewer in ROM launcher mode (0), or use the given zoom
level (1 or 2).

=item B<-uipalette> <standard|classic>

Use the specified palette for UI elements.

=item B<-listdelay> <delay>

Set the amount of time to wait between treating successive keypresses
as a single word in list widgets (value can range from 300-1000). Use
'0' to disable list-skipping completely,

=item B<-mwheel> <lines>

Set the number of lines a mousewheel will scroll in the UI.

=item B<-romdir> <dir>

Set the directory where the ROM launcher will start.

=item B<-statedir> <dir>

Set the directory in which to access state files.

=item B<-cheatfile> <file>

Set the full pathname of the cheatfile database.

=item B<-palettefile> <file>

Set the full pathname of the user-defined palette file.

=item B<-propsfile> <file>

Set the full pathname of the ROM properties file.

=item B<-nvramdir> <dir>

Set the directory in which to access non-volatile (flash/EEPROM) files.

=item B<-cfgdir> <dir>

Set the directory in which to access Distella config files.

=item B<-avoxport> <name>

Set the name of the serial port where an AtariVox is connected.

=item B<-maxres> <WxH>

Useful for developers, this sets the maximum size of window that can be
created, allowing to simulate testing on 'smaller' systems.

=item B<-help>

Prints a help message describing these options, and then exit Stella.

The following are useful to developers. Only use them if you know
what you're doing! Note that in all cases, the values supplied to
the arguments are not case sensitive.

Argument Description

=item B<-dis.resolve> <1|0>

Try to differentiate between code vs. data sections in the
disassembler. See the Debugger section for more information.

=item B<-dis.gfxformat> <2|16>

Sets the base to use for displaying GFX sections in the disassembler.

=item B<-dis.showaddr> <1|0>

Shows/hides opcode addresses in the disassembler.

=item B<-dis.relocate> <1|0>

Relocate calls out of address range in the disassembler.

=item B<-dbg.res> <WxH>

Set the size of the debugger window.

=item B<-dbg.fontstyle> <0|1|2|3>

How to use bold fonts in the debugger window. '0' means all normal
font, '1' is bold labels only, '2' is bold non-labels only, '3' is all
bold font.

=item B<-break> <address>

Set a breakpoint at specified address.

=item B<-debug>

Immediately jump to debugger mode when starting Stella.

=item B<-holdjoy0> <U,D,L,R,F>

Start the emulator with the left joystick direction/button held down
(ie, use 'UF' for up and fire).

=item B<-holdjoy1> <U,D,L,R,F>

Start the emulator with the right joystick direction/button held down
(ie, use 'UF' for up and fire).

=item B<-holdselect>

Start the emulator with the Game Select switch held down.

=item B<-holdreset>

Start the emulator with the Game Reset switch held down.

=item B<-tiadriven> <1|0>

Set unused TIA pins to be randomly driven high or low on a read/peek.
If disabled, use the last databus value for those pins instead.

=item B<-cpurandom> <S,A,X,Y,P>

On reset, randomize the content of the specified CPU registers.

=item B<-ramrandom> <1|0>

On reset, either randomize all RAM content, or zero it out instead.

=item B<-bs> <type>

Set "Cartridge.Type" property. See the Game Properties section for
valid types.

=item B<-type> <type>

Same as using -bs.

=item B<-channels> <Mono|Stereo>

Set "Cartridge.Sound" property.

=item B<-ld> <A|B>

Set "Console.LeftDifficulty" property.

=item B<-rd> <A|B>

Set "Console.RightDifficulty" property.

=item B<-tv> <Color|BW>

Set "Console.TelevisionType" property.

=item B<-sp> <Yes|No>

Set "Console.SwapPorts" property.

=item B<-lc> <type>

Set "Controller.Left" property. See the Game Properties section for
valid types.

=item B<-rc> <type>

Set "Controller.Right" property. See the Game Properties section for
valid types.

=item B<-bc> <type>

Sets both "Controller.Left" and "Controller.Right" properties. See the
Game Properties section for valid types.

=item B<-cp> <Yes|No>

Set "Controller.SwapPaddles" property.

=item B<-ma> <Auto|XY>

Set "Controller.MouseAxis" property. See the Game Properties section
for valid types.

=item B<-format> <format>

Set "Display.Format" property. See the Game Properties section for
valid formats.

=item B<-ystart> <number>

Set "Display.YStart" property (0 - 64).

=item B<-height> <number>

Set "Display.Height" property (210 - 256).

=item B<-pp> <Yes|No>

Set "Display.Phosphor" property.

=item B<-ppblend> <number>

Set "Display.PPBlend" property, used for phosphor effect (0-100).
Default is 77.

=item B<-thumb.trapfatal> <1|0>

The default of true allows the Thumb ARM emulation to throw an
exception and enter the debugger on fatal errors. When disabled, such
fatal errors are simply logged, and emulation continues. Do not use
this unless you know exactly what you're doing, as it changes the
behaviour as compared to real hardware.

=back

=head1 KEYBOARD

The Atari 2600 console controls and controllers are mapped to the
computer's keyboard as shown in the following tables. However, most of
these events can be remapped to other keys on your keyboard or buttons
on your joystick (see B<Advanced Configuration - Event Remapping> in
the HTML documentation). The tables below show the default settings.

=head2 Console Controls (can be remapped)

=over 4

=item B<Control + q>

Exit emulator

=item B<Escape>

Exit game mode/enter launcher mode

=item B<Tab>

Enter/exit options mode

=item B<Backslash (\)>

Enter/exit command mode

=item B<Backquote (`)>

Enter/exit debugger

=item B<F1>

Select Game

=item B<F2>

Reset Game

=item B<F3>

Color TV

=item B<F4>

Black/White TV

=item B<F5>

Left Player Difficulty A

=item B<F6>

Left Player Difficulty B

=item B<F7>

Right Player Difficulty A

=item B<F8>

Right Player Difficulty B

=item B<F9>

Save state to current slot

=item B<F10>

Change current state slot

=item B<F11>

Load state from current slot

=item B<F12>

Save PNG snapshot

=item B<Pause>

Pause/resume emulation

=back

=head2 Joystick / BoosterGrip Controller (can be remapped)

=head3 Left Joystick (Joy0)

=over 4

=item B<Up arrow>

Joystick Up

=item B<Down arrow>

Joystick Down

=item B<Left arrow>

Joystick Left

=item B<Right arrow>

Joystick Right

=item B<Space>

Fire Button

=item B<4>

Trigger Button

=item B<5>

Booster Button

=back

=head3 Right Joystick (Joy1)

=over 4

=item B<Y>

Joystick Up

=item B<H>

Joystick Down

=item B<G>

Joystick Left

=item B<J>

Joystick Right

=item B<F>

Fire Button

=item B<6>

Trigger Button

=item B<7>

Booster Button

=back

=head2 Paddle Controller digital emulation (can be remapped independently of joystick controller)

=head3 Left Paddles

=over 4

=item B<Same as 'Joy0 Left'>

Paddle 0 decrease

=item B<Same as 'Joy0 Right'>

Paddle 0 increase

=item B<Same as 'Joy0 Fire'>

Paddle 0 Fire

=item B<Same as 'Joy0 Up'>

Paddle 1 decrease

=item B<Same as 'Joy0 Down'>

Paddle 1 increase

=item B<Same as 'Joy0 Booster'>

Paddle 1 Fire

=back

=head3 Right Paddles

=over 4

=item B<Same as 'Joy1 Left'>

Paddle 2 decrease

=item B<Same as 'Joy1 Right'>

Paddle 2 increase

=item B<Same as 'Joy1 Fire'>

Paddle 2 Fire

=item B<Same as 'Joy1 Up'>

Paddle 3 decrease

=item B<Same as 'Joy1 Down'>

Paddle 3 increase

=item B<Same as 'Joy1 Booster'>

Paddle 3 Fire

=back

=head2 Driving Controller (cannot be remapped, always associated with joystick controller)

=head3 Left Driving

=over 4

=item B<Same as 'Joy0 Left'>

Left Direction

=item B<Same as 'Joy0 Right'>

Right Direction

=item B<Same as 'Joy0 Fire'>

Fire Button

=back

=head3 Right Driving

=over 4

=item B<Same as 'Joy1 Left'>

Left Direction

=item B<Same as 'Joy1 Right'>

Right Direction

=item B<Same as 'Joy1 Fire'>

Fire Button

=back

=head2 Sega Genesis Controller (cannot be remapped, always associated with joystick and booster-grip controllers)

=head3 Left Pad

=over 4

=item B<Same as 'Joy0 Up'>

Pad Up

=item B<Same as 'Joy0 Down'>

Pad Down

=item B<Same as 'Joy0 Left'>

Pad Left

=item B<Same as 'Joy0 Right'>

Pad Right

=item B<Same as 'Joy0 Fire'>

Button 'B'

=item B<Same as 'Joy0 Booster'>

Button 'C'

=back

=head3 Right Pad

=over 4

=item B<Same as 'Joy1 Up'>

Pad Up

=item B<Same as 'Joy1 Down'>

Pad Down

=item B<Same as 'Joy1 Left'>

Pad Left

=item B<Same as 'Joy1 Right'>

Pad Right

=item B<Same as 'Joy1 Fire'>

Button 'B'

=item B<Same as 'Joy1 Booster'>

Button 'C'

=back

=head2 Keypad Controller (can be remapped)

=head3 Left Keypad

=over 4

=item B<1>

1

=item B<2>

2

=item B<3>

3

=item B<Q>

4

=item B<W>

5

=item B<E>

6

=item B<A>

7

=item B<S>

8

=item B<D>

9

=item B<Z>

.

=item B<X>

0

=item B<C>

#

=back

=head3 Right Keypad

=over 4

=item B<8>

1

=item B<9>

2

=item B<0>

3

=item B<I>

4

=item B<O>

5

=item B<P>

6

=item B<K>

7

=item B<L>

8

=item B<;>

9

=item B<,>

.

=item B<.>

0

=item B</>

#

=back

=head2 CompuMate Controller (cannot be remapped)

=over 4

=item B< 0 - 9>

0 - 9

=item B< A - Z>

A - Z

=item B< Comma>

Comma

=item B< Period>

Period

=item B< Control (left or right)>

Func

=item B< Shift (left or right)>

Shift

=item B< Return/Enter>

Enter

=item B< Space>

Space

=item B< Backspace>

Func-Space

=item B< + or Shift-1>

+

=item B< - or Shift-2>

-

=item B< Shift-3>

*

=item B< / or Shift-4>

/

=item B< = or Shift-5>

=

=item B< ? (Shift-/) or Shift-6>

?

=item B< Shift-7>

$

=item B< [ or Shift-8>

[

=item B< ] or Shift-9>

]

=item B< " (Shift-') or Shift-0>

"

=back

=head2 TV effects (cannot be remapped, only active in TIA mode)

=over 4

=item B<Alt + 1>

Disable TV effects

=item B<Alt + 2>

Select 'Composite' preset

=item B<Alt + 3>

Select 'S-video' preset

=item B<Alt + 4>

Select 'RGB' preset

=item B<Alt + 5>

Select 'Badly adjusted' preset

=item B<Alt + 6>

Select 'Custom' preset

=item B<Shift-Alt + 7>

Decrease scanline intensity

=item B<Alt + 7>

Increase scanline intensity

=item B<Shift-Alt + 8>

Disable scanline interpolation

=item B<Alt + 8>

Enable scanline interpolation

=item B<Shift-Alt + 9>

Select previous 'Custom' mode attribute (*)

=item B<Alt + 9>

Select next 'Custom' mode attribute (*)

=item B<Shift-Alt + 0>

Decrease 'Custom' selected attribute value (*)

=item B<Alt + 0>

Increase 'Custom' selected attribute value (*)

=back

Items marked as (*) are only available in 'Custom' preset mode

=head2 Developer Keys in TIA mode (cannot be remapped)

=over

=item B<Alt + PageUp>

Set "Display.YStart" to next larger value

=item B<Alt + PageDown>

Set "Display.YStart" to next smaller value

=item B<Control + PageUp>

Set "Display.Height" to next larger value

=item B<Control + PageDown>

Set "Display.Height" to next smaller value

=item B<Alt + l>

Toggle frame stats (scanline count/fps/bs type/etc)

=item B<Alt + z>

Toggle TIA Player0 object

=item B<Alt + x>

Toggle TIA Player1 object

=item B<Alt + c>

Toggle TIA Missile0 object

=item B<Alt + v>

Toggle TIA Missile1 object

=item B<Alt + b>

Toggle TIA Ball object

=item B<Alt + n>

Toggle TIA Playfield object

=item B<Shift-Alt + z>

Toggle TIA Player0 collisions

=item B<Shift-Alt + x>

Toggle TIA Player1 collisions

=item B<Shift-Alt + c>

Toggle TIA Missile0 collisions

=item B<Shift-Alt + v>

Toggle TIA Missile1 collisions

=item B<Shift-Alt + b>

Toggle TIA Ball collisions

=item B<Shift-Alt + n>

Toggle TIA Playfield collisions

=item B<Alt + m>

Toggle TIA HMOVE blanks

=item B<Alt + Comma>

Toggle TIA 'Fixed Debug Colors' mode

=item B<Alt + .>

Toggle all TIA objects

=item B<Shift-Alt + .>

Toggle all TIA collisions

=back

=head2 Other Keys (cannot be remapped, except those marked with '*')

=over 4

=item B<Alt + =>

Switch to next larger zoom level

=item B<Alt + ->

Switch to next smaller zoom level

=item B<Alt + Enter>

Toggle fullscreen/windowed mode

=item B<Alt + [>

Decrease volume (*)

=item B<Alt + ]>

Increase volume (*)

=item B<Control + f>

Toggle console type in increasing order (NTSC/PAL/SECAM, etc))

=item B<Shift-Control + f>

Toggle console type in decreasing order (NTSC/PAL/SECAM, etc))

=item B<Control + s>

Save current properties to a new properties file

=item B<Control + 0>

Switch mouse between controller emulation modes

=item B<Control + 1>

Swap Stelladaptor/2600-daptor port ordering

=item B<Control + r>

Reload current ROM (singlecart ROM, TIA mode) or Load next game in ROM (multicart ROM, TIA mode)

=item B<Control + r>

Reload ROM listing (ROM launcher mode)

=item B<Backspace>

Emulate 'frying' effect (TIA mode) (*), Go to parent directory (UI mode) (*)
=item B<Alt + p>

Toggle 'phosphor' effect

=item B<Control + p>

Toggle palette

=item B<Control + l>

Toggle PAL color-loss effect

=item B<Alt + s>

Save continuous PNG snapshots (per interval)

=item B<Shift-Alt + s>

Save continuous PNG snapshots (every frame)

=back

=head2 UI keys in Text Editing areas (cannot be remapped)

=over 4

=item B<Home>

Move cursor to beginning of line

=item B<End>

Move cursor to end of line

=item B<Delete>

Remove character to right of cursor

=item B<Backspace>

Remove character to left of cursor

=item B<Control-a>

Same function as 'Home'

=item B<Control-e>

Same function as 'End'

=item B<Control-d>

Same function as 'Delete'

=item B<Control-k>

Remove all characters from cursor to end of line

=item B<Control-u>

Remove all characters from cursor to beginning of line

=item B<Control-w>

Remove entire word to left of cursor

=item B<Control-Left>

Move cursor to beginning of word to the left

=item B<Control-Right>

Move cursor to beginning of word to the right

=item B<Control-c>

Copy entire line to clipboard (not complete)

=item B<Control-v>

Paste clipboard contents (not complete)

=back

=head1 FILES

B<$HOME/.stella/> contains the following:

=over 4

=item B<stellarc>

The Stella config file, created by B<stella>. May be hand-edited, but
normally the built-in GUI is used to set these options.

=item B<cfg/>

Directory for DiStella config files, used only by the debugger.

=item B<nvram/>

Directory used to store the contents of non-volatile cartridge memory.

=item B<state/>

Directory used to store save-states (see B<F9> key).

=back

=head1 AUTHORS

Stella was originally developed for Linux by Bradford W. Mott
<bwmott@users.sourceforge.net>, and is currently maintained by Stephen
Anthony <stephena@users.sourceforge.net>. Other contributors include
Eckhard Stolberg <estolberg@users.sourceforge.net> and Brian Watson
<yalhcru@gmail.com>.

=head1 SEE ALSO

Stella web site: I<http://stella.sourceforge.net/>.
