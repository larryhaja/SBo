#!/bin/sh

# Slackware build script for Chicken Scheme

# Written by Erik Falor (ewfalor@gmail.com)
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

PRGNAM=chicken
VERSION=${VERSION:-4.8.0.5}
BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i486 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

CWD=$(pwd)
TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
tar xvf $CWD/$PRGNAM-$VERSION.tar.gz
cd $PRGNAM-$VERSION
chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# Don't let chicken use $ARCH as a variable.
for f in defaults.make Makefile.linux rules.make
  do
    sed "s,ARCH,zARCH," -i ${f}
  done

# Due to the way Chicken generates C code from Scheme sources, it is expensive
# to apply a patch to the generated C files.  Instead, we first build an
# unpatched bootstrap Chicken compiler - this will allow us to apply the
# security patches to the Scheme source code of Chicken itself, allowing us to
# rebuild Chicken from scratch.

make boot-chicken \
  C_COMPILER_OPTIMIZATION_OPTIONS="$SLKCFLAGS" \
  PLATFORM=linux

# Apply the security patches to Chicken's Scheme sources
for P in $CWD/patches/* ; do patch -p1 -i $P ; done

# Build Chicken anew using the bootstrapping compiler to generate new C files
# from our patched code
make \
  C_COMPILER_OPTIMIZATION_OPTIONS="$SLKCFLAGS" \
  PLATFORM=linux \
  PREFIX=/usr \
  LIBDIR=/usr/lib${LIBDIRSUFFIX} \
  TOPMANDIR=/usr/man \
  DOCDIR=/usr/doc/$PRGNAM-$VERSION \
  CHICKEN=./chicken-boot

make install \
  C_COMPILER_OPTIMIZATION_OPTIONS="$SLKCFLAGS" \
  PLATFORM=linux \
  PREFIX=/usr \
  LIBDIR=/usr/lib${LIBDIRSUFFIX} \
  TOPMANDIR=/usr/man \
  DOCDIR=/usr/doc/$PRGNAM-$VERSION \
  DESTDIR=$PKG

# should be a symbolic link not a copy otherwise ldconfig will cry
( cd $PKG/usr/lib${LIBDIRSUFFIX} ; rm -f *.so ; ln -s libchicken.so{.6,} )

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | \
 grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

find $PKG/usr/man -type f -exec gzip -9 {} \;

cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}
